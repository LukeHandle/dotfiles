path_append() {
  for ARG in "$@"
  do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="${PATH:+"$PATH:"}$ARG"
    fi
  done
}

path_prepend() {
  for ((i=$#; i>0; i--));
  do
    ARG=${!i}
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
        PATH="$ARG${PATH:+":$PATH"}"
    fi
  done
}

dataurl() {
  local mimetype=$(file -b --mime-type "$1");
  if [[ $mimetype == text/* ]]; then
    mimetype="${mimetype};charset=utf-8";
  fi

  echo "data:${mimetype};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

gitio() {
  if [ -z "${1}" -o -z "${2}" ]; then
    echo "Usage: \`gitio slug url\`";
    return 1;
  fi

  curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

server() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &

  # Use text/plain
  # Use utf8
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

gz() {
  local osize=$(wc -c < "$1");
  local gsize=$(gzip -c "$1" | wc -c);
  local ratio=$(echo "$gsize * 100 / $osize" | bc -l);

  printf "orig: %d bytes\n" "$osize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gsize" "$ratio";
}

c() {
  if [ $# -eq 0 ]; then
    code .;
  else
    code "$@";
  fi
}

ironkey_backup() {
  local ironkey_mount="/Volumes/Imation USB"
  local storage_mount="/Volumes/Storage"
  local backup_mount="/Volumes/IronKey_Backup"
  local backup_image_path="$storage_mount/IronKey_Backup.sparseimage"

  if [ ! -d "$ironkey_mount" ]; then
    echo "Ironkey not mounted!"
    return 1;
  fi

  echo Getting sudo privileges
  sudo -v

  if [ ! -d "$storage_mount" ]; then
    echo Connecting to Storage
    open -g afp://storage.home.dmarby.se/Storage
    sleep 2
  fi

  if [ ! -d "$storage_mount" ]; then
    echo "Storage not mounted!"
    return 1;
  fi

  if [ ! -f "$backup_image_path" ]; then
    echo "Backup image does not exist!"
    return 1;
  fi

  echo Mounting image
  sudo hdiutil attach -mountpoint "$backup_mount" "$backup_image_path" -stdinpass

  echo Syncing files
  rsync -avh --exclude=.fseventsd --exclude=.Apps --exclude=.apdisk --exclude=.Trashes --exclude=.TemporaryItems --exclude=.DocumentRevisions-V100 --exclude=.Spotlight-V100 --delete "$ironkey_mount/" "$backup_mount/"

  echo Detaching image
  local device=$(hdiutil info | grep "$backup_mount" | cut -f1)
  sudo hdiutil unmount "$backup_mount"

  if [ ! -z "$device" ]; then
      sudo hdiutil detach $device
  fi

  echo Done
}

# Go
gopath() {
  local basename=$(basename $PWD)
  cd ~/go/src/github.com/DMarby/$basename
}

p() {
  if [ $# -eq 0 ]; then
    cd $HOME/Projects;
  else
    cd "$HOME/Projects/$@";
  fi
}
