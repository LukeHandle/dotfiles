#!/bin/sh

ROOT=~/
VENDOR=~/.vendor
DOTFILES=~/.dotfiles
DOTFILES_SHELL=$DOTFILES/shell
DOTFILES_EDITORS=$DOTFILES/editors
DOTFILES_PACKAGES=$DOTFILES/pkgs

# Directory / File specific
TAP_PACKAGES=$DOTFILES_PACKAGES/taps
BREW_PACKAGES=$DOTFILES_PACKAGES/brews
CASK_PACKAGES=$DOTFILES_PACKAGES/casks
CODE_PACKAGES=$DOTFILES_PACKAGES/vscode
APT_PACKAGES=$DOTFILES_PACKAGES/apt
PIP_PACKAGES=$DOTFILES_PACKAGES/pip
GO_PACKAGES=$DOTFILES_PACKAGES/go
NPM_PACKAGES=$DOTFILES_PACKAGES/npm

# Logging
WARN='\033[0;31m'
FG='\033[1;34m'
NC='\033[0m'

# Logging functions
function ewrn { printf "${FG}[${WARN}!${FG}] ${1}${NC}\n"; }
function eerr { printf "${FG}[${WARN}x${FG}] ${1}${NC}\n"; }
function einf { printf "${FG}[i] ${1}${NC}\n"; }
function eask { printf "${FG}[?] ${1} (y/n)${NC} "; }
function link { ln -sF "$1" "$2"; }

# Ask then take action function
function askdo {
  eask "$2"
  read -r choice
  case "$choice" in y|Y|yes|yeah ) $1; return;; esac
}

# Check OS is X before asking to perform the action
function askdo_os {
  if ! _is_os $1; then
    einf "Skipping ${2} as OS is $(whatos)"
    return
  fi

  askdo "$2" "$3"
}

# What OS
function whatos {
  unameOut="$(uname -s)"
  case "${unameOut}" in
      Linux*)     machine=Linux;;
      Darwin*)    machine=Mac;;
      CYGWIN*)    machine=Cygwin;;
      MINGW*)     machine=MinGw;;
      *)          machine="UNKNOWN:${unameOut}"
  esac
  echo ${machine}
}

function _is_os {
  if [ "$(whatos)" = "$1" ]; then return 0; else return 1; fi
}

function is_mac {
  return $(_is_os "Mac")
}

function is_linux {
  return $(_is_os "Linux")
}
